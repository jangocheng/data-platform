// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/service/data-source/data_source.proto

package go_micro_srv_data_source

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DataSourceService service

type DataSourceService interface {
	QueryData(ctx context.Context, in *QueryDataRequest, opts ...client.CallOption) (*QueryDataResponse, error)
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...client.CallOption) (*QueryParamsResponse, error)
}

type dataSourceService struct {
	c    client.Client
	name string
}

func NewDataSourceService(name string, c client.Client) DataSourceService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.data_source"
	}
	return &dataSourceService{
		c:    c,
		name: name,
	}
}

func (c *dataSourceService) QueryData(ctx context.Context, in *QueryDataRequest, opts ...client.CallOption) (*QueryDataResponse, error) {
	req := c.c.NewRequest(c.name, "DataSourceService.QueryData", in)
	out := new(QueryDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceService) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...client.CallOption) (*QueryParamsResponse, error) {
	req := c.c.NewRequest(c.name, "DataSourceService.QueryParams", in)
	out := new(QueryParamsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataSourceService service

type DataSourceServiceHandler interface {
	QueryData(context.Context, *QueryDataRequest, *QueryDataResponse) error
	QueryParams(context.Context, *QueryParamsRequest, *QueryParamsResponse) error
}

func RegisterDataSourceServiceHandler(s server.Server, hdlr DataSourceServiceHandler, opts ...server.HandlerOption) error {
	type dataSourceService interface {
		QueryData(ctx context.Context, in *QueryDataRequest, out *QueryDataResponse) error
		QueryParams(ctx context.Context, in *QueryParamsRequest, out *QueryParamsResponse) error
	}
	type DataSourceService struct {
		dataSourceService
	}
	h := &dataSourceServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DataSourceService{h}, opts...))
}

type dataSourceServiceHandler struct {
	DataSourceServiceHandler
}

func (h *dataSourceServiceHandler) QueryData(ctx context.Context, in *QueryDataRequest, out *QueryDataResponse) error {
	return h.DataSourceServiceHandler.QueryData(ctx, in, out)
}

func (h *dataSourceServiceHandler) QueryParams(ctx context.Context, in *QueryParamsRequest, out *QueryParamsResponse) error {
	return h.DataSourceServiceHandler.QueryParams(ctx, in, out)
}
